# this workflow will run on every pr to make sure the project is following the guidelines

name: PR-CI

on:
  pull_request:
    branches: ["*"]
  
jobs:
  install-deps:
    runs-on: ubuntu-latest
    name: Run pnpm install
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/cache@v3
        id: pnpm-cache
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - uses: pnpm/action-setup@v2.2.2
        with:
          version: 7.2.1
      - uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: "pnpm"
        if: steps.pnpm-cache.outputs.cache-hit != 'true'
      - run: pnpm install


  lint:
    runs-on: ubuntu-latest
    name: Run ESLint
    needs: install-deps
    steps:
      - uses: actions/checkout@v3
      - name: Load node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/pnpm-lock.yaml') }}
      - name: Restore ESLint Cache
        uses: actions/cache@v3
        id: eslint-cache
        with:
          path: .eslintcache
          key: ${{ matrix.os }}-eslint-${{ hashFiles('**/*.ts', 'package.json', 'tsconfig.json') }}
      - uses: pnpm/action-setup@v2.2.2
        with:
          version: 7.2.1
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - run: pnpm lint:check

  lint-pr:
    runs-on: ubuntu-latest
    name: Lint the PR title
    needs: install-deps
    steps:
      - uses: amannn/action-semantic-pull-request@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  prettier:
    runs-on: ubuntu-latest
    name: Run Prettier Check
    needs: install-deps
    steps:
      - uses: actions/checkout@v3
      - name: Load node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/pnpm-lock.yaml') }}
      - uses: pnpm/action-setup@v2.2.2
        with:
          version: 7.2.1
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - run: pnpm format:check

  tsc:
    runs-on: ubuntu-latest
    name: Run Type Check
    needs: install-deps
    steps:
      - uses: actions/checkout@v3
      - name: Load node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/pnpm-lock.yaml') }}
      - uses: pnpm/action-setup@v2.2.2
        with:
          version: 7.2.1
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - run: pnpm typecheck

  build-t3-app:
    runs-on: ubuntu-latest
    name: Build an outputted t3-app
    needs: install-deps
    steps:
      - uses: actions/checkout@v3
      - name: Load node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/pnpm-lock.yaml') }}
      - uses: pnpm/action-setup@v2.2.2
        with:
          version: 7.2.1
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - run: pnpm build
      # has to be scaffolded outside the CLI project so that no lint/tsconfig are leaking
      # through. this way it ensures that it is the app's configs that are being used
      - run: pnpm start -y ../ci-test-app
      - run: mv ../ci-test-app/.env-example ../ci-test-app/.env
      - run: cd ../ci-test-app && pnpm build
