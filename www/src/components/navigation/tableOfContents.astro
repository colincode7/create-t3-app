---
import type { MarkdownHeading } from "astro";

export interface Props {
  headings: MarkdownHeading[];
  title: string;
}

let { headings, title } = Astro.props;
headings = [{ depth: 2, slug: "overview", text: title }, ...headings].filter(
  ({ depth }) => depth > 1 && depth < 4,
);
---

<div>
  <h2
    class="text-lg mb-4 font-semibold dark:text-t3-purple-50 text-slate-900"
    id="toc-heading"
  >
    On this page
  </h2>
  <ul class="w-full marker:text-t3-purple-300 mb-4 list-none">
    {
      headings.map((heading) => {
        const { depth, slug, text } = heading;

        return (
          <li
            class={`pl-${
              depth * 2 - 2
            } w-full list-none border-l-2 border-t3-purple-300/20 pb-1 transition-all duration-300 hover:border-t3-purple-300/50`}
          >
            <a
              class="text-t3-purple-800 hover:text-t3-purple-400 dark:text-t3-purple-200 dark:hover:text-t3-purple-100"
              href={`#${slug}`}
            >
              {text}
            </a>
          </li>
        );
      })
    }
  </ul>
</div>

<script is:inline>
  // Toggle classes when items are in view
  document.querySelectorAll("article :is(h1,h2,h3)").forEach((h) => {
    new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          const id = entry.target.id;
          // have to do "All" here cause we render this component in pageContent for mobile too
          const tocItem = Array.from(
            document.querySelectorAll(`a[href="#${id}"]`),
          ).at(-1);
          // this occurs when the id = "toc-heading"
          if (!tocItem) return;

          if (entry.isIntersecting) {
            // get current all active elements
            const currentActiveElements = Array.from(
              document.querySelectorAll(
                `[data-current-active-tab-content-item="true"]`,
              ),
            );

            // get current all parent active elements
            const currentActiveParentElements = Array.from(
              document.querySelectorAll(
                `[data-current-active-parent-tab-content-item="true"]`,
              ),
            );

            // if has active elements
            if (currentActiveElements.length) {
              // loop through all elements and remove class and attr
              for (const el of currentActiveElements) {
                el.classList.remove(
                  "font-medium",
                  "text-t3-purple-700",
                  "dark:text-t3-purple-100",
                );
                el.removeAttribute("data-current-active-tab-content-item");
              }
            }
            // if has active parent elements
            if (currentActiveParentElements.length) {
              // loop through all parent elements and remove class and attr
              for (const parentEl of currentActiveParentElements) {
                parentEl.classList.remove("border-t3-purple-300/100");
                parentEl.removeAttribute(
                  "data-current-active-parent-tab-content-item",
                );
              }
            }

            tocItem.classList.add(
              "font-medium",
              "text-t3-purple-700",
              "dark:text-t3-purple-100",
            );
            tocItem.parentElement.classList.add("border-t3-purple-300/100");
            // set data attr to active element also will helpful when need to remove active state
            tocItem.setAttribute("data-current-active-tab-content-item", true);
            tocItem.parentElement.setAttribute(
              "data-current-active-parent-tab-content-item",
              true,
            );
          }
        });
      },
      {
        rootMargin: "-100px 0% -66%",
        threshold: 1,
      },
    ).observe(h);
  });
</script>
