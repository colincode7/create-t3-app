---
import type { Frontmatter } from "../../config";
import MoreMenu from "../navigation/moreMenu.astro";
import TableOfContents from "../navigation/TableOfContents";
import type { MarkdownHeading } from "astro";

export interface Props {
  frontmatter: Frontmatter;
  headings: MarkdownHeading[];
  githubEditUrl: string;
}

const { frontmatter, headings, githubEditUrl } = Astro.props;
const title = frontmatter.title;
---

<article id="article" class="flex flex-col h-full w-full">
  <section class="mb-16 markdown w-full">
    <h1 id="overview">{title}</h1>
    <nav class="flex sm:hidden pl-3">
      <TableOfContents client:media="(max-width: 50em)" headings={headings} />
    </nav>
    <article class="markdown w-full">
      <slot />
    </article>
  </section>
  <nav class="flex sm:hidden">
    <MoreMenu editHref={githubEditUrl} />
  </nav>
</article>

<script>
  const copySVG = `<svg
    stroke="currentColor"
    fill="none"
    strokeWidth={0}
    viewBox="0 0 24 24"
    height="1.3em"
    width="1.3em"
    xmlns="http://www.w3.org/2000/svg"
    {...props}
  >
    <path
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={2}
      d="M8 5H6a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2v-1M8 5a2 2 0 0 0 2 2h2a2 2 0 0 0 2-2M8 5a2 2 0 0 1 2-2h2a2 2 0 0 1 2 2m0 0h2a2 2 0 0 1 2 2v3m2 4H10m0 0 3-3m-3 3 3 3"
    />
  </svg>`;

  let blocks = document.querySelectorAll("pre");
  blocks.forEach((block) => {
    block.className =
      "relative flex max-w-xs sm:max-w-lg w-full h-full hover:cursor-pointer";
    let copyButton = document.createElement("button");
    copyButton.className =
      "inline-flex absolute right-1 top-1 border border-slate-50 rounded-lg px-2 py-1 text-sm hover:text-slate-800 hover:bg-gray-100 focus:outline-none focus:shadow-outline text-brand-primary";
    copyButton.innerHTML = copySVG;
    copyButton.addEventListener("click", () => {
      let text = "";
      const pre = copyButton.parentElement;
      let code = pre?.querySelector("code");
      if (code) {
        text = code.innerText;
      } else {
        const span = pre?.querySelector("span");
        if (span) {
          text = span.innerText;
        }
      }
      if (text) {
        try {
          navigator.clipboard.writeText(text);
        } catch (err) {
          console.error("Failed to copy: ", err);
        }
        copyButton.innerHTML = `<svg
    stroke="currentColor"
    fill="currentColor"
    strokeWidth={0}
    viewBox="0 0 1024 1024"
    height="1.3em"
    width="1.3em"
    xmlns="http://www.w3.org/2000/svg"
    {...props}
  >
    <path
      d="M699 353h-46.9c-10.2 0-19.9 4.9-25.9 13.3L469 584.3l-71.2-98.8c-6-8.3-15.6-13.3-25.9-13.3H325c-6.5 0-10.3 7.4-6.5 12.7l124.6 172.8a31.8 31.8 0 0 0 51.7 0l210.6-292c3.9-5.3.1-12.7-6.4-12.7z"
      stroke="none"
    />
    <path
      d="M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z"
      stroke="none"
    />
  </svg>`;
        setTimeout(() => {
          copyButton.innerHTML = copySVG;
        }, 1000);
      }
    });

    block.appendChild(copyButton);
  });
</script>
