---
import type { Frontmatter } from "../../config";
import TableOfContents from "../navigation/tableOfContents.astro";
import type { MarkdownHeading } from "astro";

export interface Props {
  frontmatter: Frontmatter;
  headings: MarkdownHeading[];
}

const { frontmatter, headings } = Astro.props;
const title = frontmatter.title;
---

<article id="article" class="flex flex-col w-full max-w-screen-lg">
  <section class="w-full">
    <h1
      id="overview"
      class="mb-4 text-3xl font-extrabold dark:text-t3-purple-100 px-3"
    >
      {title}
    </h1>
    <nav class="flex md:hidden p-3">
      <TableOfContents headings={headings} title={title} />
    </nav>
    <article class="markdown w-full">
      <slot />
    </article>
  </section>
</article>

<script>
  const copySVG = `<svg
    stroke="currentColor"
    fill="none"
    strokeWidth={0}
    viewBox="0 0 24 24"
    height="1.3em"
    width="1.3em"
    xmlns="http://www.w3.org/2000/svg"
    {...props}
  >
    <path
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={2}
      d="M8 5H6a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2v-1M8 5a2 2 0 0 0 2 2h2a2 2 0 0 0 2-2M8 5a2 2 0 0 1 2-2h2a2 2 0 0 1 2 2m0 0h2a2 2 0 0 1 2 2v3m2 4H10m0 0 3-3m-3 3 3 3"
    />
  </svg>`;

  let blocks = document.querySelectorAll("pre");
  blocks.forEach((block) => {
    block.className = "relative flex w-full h-full hover:cursor-pointer";
    let copyButton = document.createElement("button");
    copyButton.className =
      "inline-flex absolute right-[.45em] top-[.45em]  rounded-lg p-1 text-sm text-slate-50 hover:bg-slate-100/25 focus:outline-none focus:shadow-outline text-brand-primary";
    copyButton.innerHTML = copySVG;
    copyButton.addEventListener("click", () => {
      let text = "";
      const pre = copyButton.parentElement;
      let code = pre?.querySelector("code");
      if (code) {
        text = code.innerText;
      } else {
        const span = pre?.querySelector("span");
        if (span) {
          text = span.innerText;
        }
      }
      if (text) {
        try {
          navigator.clipboard.writeText(text);
        } catch (err) {
          console.error("Failed to copy: ", err);
        }
        copyButton.innerHTML = `<svg
    stroke="#22c55e"
    fill="#22c55e"
    strokeWidth={0}
    viewBox="0 0 1024 1024"
    height="1.3em"
    width="1.3em"
    xmlns="http://www.w3.org/2000/svg"
    {...props}
  >
    <path
      d="M699 353h-46.9c-10.2 0-19.9 4.9-25.9 13.3L469 584.3l-71.2-98.8c-6-8.3-15.6-13.3-25.9-13.3H325c-6.5 0-10.3 7.4-6.5 12.7l124.6 172.8a31.8 31.8 0 0 0 51.7 0l210.6-292c3.9-5.3.1-12.7-6.4-12.7z"
      stroke="none"
    />
    <path
      d="M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z"
      stroke="none"
    />
  </svg>`;
        setTimeout(() => {
          copyButton.innerHTML = copySVG;
        }, 1000);
      }
    });

    block.appendChild(copyButton);
  });
</script>
<script is:inline>
  //FIXME: We can make this properly typed later
  /**
   * Allows us to animate the details element
   * for it to work make sure the details element contains a summary element
   * and a div element with the class of content
   * @param {*} element the details element which we wish to animate
   */
  const AnimateDetails = (element) => {
    const summary = element.querySelector("summary");
    const content = element.querySelector(".content");
    let props = { animation: null, isClosing: false, isExpanding: false };

    /**
     * onClick event handler for the summary element
     * @param {*} event the event object
     */
    const onClick = (event) => {
      event.preventDefault();

      element.style.overflow = "hidden";

      if (props.isClosing || !element.open) open();
      else if (props.isExpanded || element.open) close();
    };

    /**
     * Closes the details element
     * This function is in charge of animating the closing of the
     * details element
     */
    const close = () => {
      props.isClosing = true;

      const startHeight = `${element.offsetHeight}px`;
      const endHeight = `${summary.offsetHeight}px`;

      if (props.animation) props.animation.cancel();

      props.animation = element.animate(
        {
          height: [startHeight, endHeight],
        },
        {
          duration: 300,
          easing: "ease-in-out",
        },
      );

      props.animation.onfinish = () => onAnimationFinish(false);
      props.animation.oncancel = () => (props.isClosing = false);
    };

    /**
     * Opens the details element
     * requests the animation frame to animate the opening of the details element
     */
    const open = () => {
      element.style.height = `${summary.offsetHeight}px`;
      element.open = true;
      window.requestAnimationFrame(() => expand());
    };

    /**
     * Expands the details element
     * This function is in charge of animating the expansion of the
     * details element
     */
    const expand = () => {
      props.isExpanding = true;

      const startHeight = `${element.offsetHeight}px`;
      const endHeight = `${content.offsetHeight + summary.offsetHeight}px`;

      if (props.animation) props.animation.cancel();

      props.animation = element.animate(
        {
          height: [startHeight, endHeight],
        },
        {
          duration: 300,
          easing: "ease-in-out",
        },
      );

      props.animation.onfinish = () => onAnimationFinish(true);
      props.animation.oncancel = () => (props.isExpanding = false);
    };

    /**
     * Called when the animation is finished
     * @param {*} open whether the details element is open or not
     */
    const onAnimationFinish = (open) => {
      element.open = open;
      props.animation = null;
      props.isClosing = false;
      props.isExpanding = false;

      element.style.height = element.style.overflow = "";
    };

    /**
     * Adds our new event listener to the summary element
     */
    summary.addEventListener("click", (event) => onClick(event));
  };

  /**
   * Allows us to animate all the details elements on the page
   * Will check if the details element contains a div element with the class of content
   */
  const viableDetails = document.querySelectorAll("details");
  viableDetails.forEach((element) => {
    if (element.querySelector(".content")) {
      AnimateDetails(element);
    }
  });
</script>
