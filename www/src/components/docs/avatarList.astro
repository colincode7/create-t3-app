---
// fetch all commits for just this page's path
export interface Props {
  path: string;
}
const { path } = Astro.props;
const resolvedPath = `www/${path}`;
const url = `https://api.github.com/repos/t3-oss/create-t3-app/commits?path=${resolvedPath}`;
const commitsURL = `https://github.com/t3-oss/create-t3-app/commits/main/${resolvedPath}`;

type Commit = {
  author: {
    id: string;
    login: string;
  };
};

async function getCommits(url: string) {
  try {
    const token = import.meta.env.PUBLIC_GITHUB_TOKEN;
    if (!token) {
      throw new Error(
        'Cannot find "PUBLIC_GITHUB_TOKEN" used for escaping rate-limiting.',
      );
    }

    const auth = `Basic ${Buffer.from(token, "binary").toString("base64")}`;

    const res = await fetch(url, {
      method: "GET",
      headers: {
        Authorization: auth,
        "User-Agent": "@ct3a-www/1.0",
      },
    });

    const data = await res.json();

    if (!res.ok) {
      throw new Error(
        `Request to fetch commits failed. Reason: ${res.statusText}
       Message: ${data.message}`,
      );
    }

    return data as Commit[];
  } catch (e) {
    console.warn(`[error]  /src/components/AvatarList.astro 
    ${(e as any)?.message ?? e}`);
    return [] as Commit[];
  }
}

function removeDups(arr: Commit[]) {
  const map = new Map<string, Commit["author"]>();

  for (let item of arr) {
    const author = item.author;
    // Deduplicate based on author.id
    map.set(author.id, { login: author.login, id: author.id });
  }

  return [...map.values()];
}

const data = await getCommits(url);
const unique = removeDups(data);
const recentContributors = unique.slice(0, 3); // only show avatars for the 3 most recent contributors
const additionalContributors = unique.length - recentContributors.length; // list the rest of them as # of extra contributors
---

<div class="flex flex-col gap-2 items-center justify-center py-3">
  <span class="py-2">Recent Contributors To This Page</span>
  <ul class="flex gap-4">
    {
      recentContributors.map((item) => (
        <li>
          <a href={`https://github.com/${item.login}`}>
            <img
              class="h-8 w-8 rounded-full sm:h-10 sm:w-10"
              alt={`Contributor ${item.login}`}
              title={`Contributor ${item.login}`}
              width="64"
              height="64"
              src={`https://avatars.githubusercontent.com/u/${item.id}`}
            />
          </a>
        </li>
      ))
    }
  </ul>
  {
    additionalContributors > 0 && (
      <span>
        <a
          href={commitsURL}
        >{`and ${additionalContributors} additional contributor${
          additionalContributors > 1 ? "s" : ""
        }.`}</a>
      </span>
    )
  }
  {
    unique.length === 0 && (
      <a class="text-slate-900 dark:text-white" href={commitsURL}>
        Contributors
      </a>
    )
  }
</div>
